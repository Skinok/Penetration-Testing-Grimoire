Radare2

      1) General presentation

            Helpfull links : 
                  https://thanat0s.trollprod.org/2014/05/radare2-tuto-basic-premiere-approche/
                  https://www.youtube.com/watch?v=3NTXFUxcKPc
                  https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes/
                  
            Book : https://radare.gitbooks.io/radare2book
            
            COMMANDS : https://radare.gitbooks.io/radare2book/refcard/intro.html
            
      2) Analyze the file description : 
            
            > radare2 myFile
            
            [0x00001060]> ie
                  [Entrypoints]
                  vaddr=0x00001060 paddr=0x00001060 haddr=0x00000018 hvaddr=0x00000018 type=program

                  1 entrypoints
                  
            [0x00001060]> iM
                  [Main]
                  vaddr=0x00001258 paddr=0x00001258

            [0x00001060]> is
                  [Symbols]
                  Num Paddr      Vaddr      Bind     Type Size Name
                  001 0x00000000 0x00000000   WEAK NOTYPE   16 imp._ITM_deregisterTMCloneTable
                  002 0x00001030 0x00001030 GLOBAL   FUNC   16 imp.puts
                  003 0x00001040 0x00001040 GLOBAL   FUNC   16 imp.printf
                  004 0x00000000 0x00000000 GLOBAL   FUNC   16 imp.__libc_start_main
                  ...

            [0x00001060]> iz
            [Strings]
            Num Paddr      Vaddr      Len Size Section  Type  String
            000 0x00002008 0x00002008  50  51 (.rodata) ascii You almost got me :D\nHere is small price for you: 

      2.1) Flags : Flags are like bookmarks, but they carry some extra information like size, tags or associated flagspace. 
      [0x7f23dc6df090]> fs
            0    3 * strings
            1    4 * symbols
            2   28 * sections
            3   10 * segments
            4   11 * relocs
            5   20 * imports
            6   19 * regs
            7    3 * functions
            
      [0x7f23dc6df090]> f
            0x00400a70 15 str.SuperSeKretKey
            0x00400a82 5 str.20s
            0x00400a87 6 str.s
            0x0040085d 283 main
            0x004006a0 41 entry0
            ...
            
      [0x7f23dc6df090]> fs functions
      [0x7f23dc6df090]> f
            0x0040078d 208 sub.time_40078d
            0x00400978 96 sub.putchar_400978
            0x004006d0 41 fcn.004006d0

      

      2.2) Renaming Assembly variable : 
      
       > afn blabla : rename the current function to blabla
       > afvn local_8h toto : rename the local_8H var to toto
       > afta : The type inference for local variables and arguments is well integrated
          It allows variable to be typed in ASM code instead of all ints.

      3) Graphical Mode : 
            > VV : current graph is shown. The blue box indicate the current function
            > V! : fancy debugger mode
            
            > p : cycle across different representations
            
                hjkl - scroll canvas
                HJKL - move node
                tab/TAB - select next/previous node
                t/f - follow true/false edges
                . - center the graph
                p - press repeatedly to change graph view

      4) Debug Mode : 
      
            Launch the program in debug mode : 
               > r2 -d myprog.bin
               > aaa
               > s sym.main
               > pdf
               > db 0x00415151 : place a breakpoint at the given adress
               > VV (optional : visual mode in ddebug) "rip" is a register of the current instruction pointer, it's the green arrow of visual 
               :> dc : debug continue 
               :> s : step by step instruction into functions (F11) / S : step by step (F10)
               :> dr : display registers content
               >dr rip=0x1515111321 : set the "rip" (or current pointer) to the adress we want, in order to force the jump at a particular loccation
               
               Show Register FLAGS :  
                  doc : https://en.wikipedia.org/wiki/FLAGS_register 
                        http://faydoc.tripod.com/cpu/ja.htm
                        
                  :> dr 1
                  cf = 0x00000000
                  pf = 0x00000000
                  af = 0x00000000
                  zf = 0x00000000
                  sf = 0x00000000
                  tf = 0x00000000
                  if = 0x00000000
                  df = 0x00000000
                  of = 0x00000000
               
           > ood

      5 ) Modify the binary 
          Used the 'w' command : 
          
          0x02145210 jne 0x12154848
          >oo+ : re-open in re-write mode
          >s 0x02145210
          >wx 9090
          >oo : re-open in read mode
          
          6 ) Tips 
          
          Debugging with an STDIN entry (e.g. : bufferoverflow)
          [0x00400500]> dor stdin=/tmp/skinok.txt
          [0x00400500]> !python -c "print('B'*100)" > /tmp/skinok.txt
          [0x00400500]> ood
          [0x00400500]> dc
            Hello BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

Notes a trier :

            [0x004004c0]> arf sym.imp.strcmp  // Donne moi les références. 
            Finding references of flags matching 'sym.imp.strcmp'...
            ar 0x004004a0 0x0040060f
            
             [0x004004c0]> !rax2 -s 0x2173736170  | rev

            On peut utiliser «rax2» un autre tools de la suite RadaRE2 qui convertit tout en tout. 
            Et il est aussi possible de l’apeller directement depuis notre RadaRE2 avec un «!».

              
